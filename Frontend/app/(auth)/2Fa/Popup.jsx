import React, { useState } from "react";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { setNumber, submitNumber } from "./2FaUtils";

export function closePopopupSvg(setPopUp) {
	return (
		<svg
			onClick={() => setPopUp(false)}
			className="absolute top-[20px] right-[20px] cursor-pointer"
			width="20"
			height="20"
			viewBox="0 0 26 26"
			fill="none"
			xmlns="http://www.w3.org/2000/svg"
		>
			<path
				d="M16.0807 13L25.3668 3.71137C26.2111 2.86695 26.2111 1.47774 25.3668 0.633316C24.5227 -0.211105 23.1338 -0.211105 22.2896 0.633316L13.0034 9.92195L3.7172 0.633316C2.873 -0.211105 1.48416 -0.211105 0.639958 0.633316C0.217858 1.05553 0 1.61393 0 2.17234C0 2.73075 0.217858 3.28916 0.639958 3.71137L9.92616 13L0.639958 22.2886C0.217858 22.7108 0 23.2693 0 23.8277C0 24.3861 0.217858 24.9445 0.639958 25.3667C1.48416 26.2111 2.873 26.2111 3.7172 25.3667L13.0034 16.0781L22.2896 25.3667C23.1338 26.2111 24.5227 26.2111 25.3668 25.3667C26.2111 24.5223 26.2111 23.1331 25.3668 22.2886L16.0807 13Z"
				fill="white"
				fillOpacity="0.29"
			/>
		</svg>
	);
}

const errorSvg = (
	<svg
		width="16"
		height="32"
		viewBox="0 0 32 32"
		fill="none"
		xmlns="http://www.w3.org/2000/svg"
	>
		<path
			d="M16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z"
			fill="white"
		/>
		<path
			d="M14.5 25H17.5V22H14.5V25ZM14.5 6V19H17.5V6H14.5Z"
			fill="#FF0000"
		/>
	</svg>
);

export function PopupSetup2Fa(props) {
	let QrImage = props.QrCode;
	const setPopUp = props.setShowQr;

	return (
		<div className="w-[620px] [@media(max-width:650px)]:w-[90%] flex flex-col items-center gap-[20px] bg-[#343434] rounded-[25px] shadow-[0_4px_40px_5px_rgba(0,0,0,0.7)] relative">
			{closePopopupSvg(setPopUp)}
			<h1 className=" font-bold text-[30px] text-white mt-[50px] [@media(max-width:560px)]:text-[20px] [@media(max-width:460px)]:text-[16px]">
				Tow Factor Authentication Setup
			</h1>
			<h2 className=" font-semibold text-[20px] text-gray-300 text-opacity-60 [@media(max-width:560px)]:text-[15px] [@media(max-width:560px)]:font-medium [@media(max-width:460px)]:text-[12px]">
				1. Install Google Authenticator App
			</h2>
			<h2 className=" font-semibold text-[20px] text-gray-300 text-opacity-60 [@media(max-width:560px)]:text-[15px] [@media(max-width:560px)]:font-medium [@media(max-width:460px)]:text-[12px]">
				2. Open the App and Scan the Qr Code{" "}
			</h2>
			{!QrImage && (
				<div className="animate-shake bg-red-600 w-[60%] h-[40px] rounded-[5px] flex justify-center items-center [@media(max-width:560px)]:w-[80%]">
					{errorSvg}
					<span className=" p-[5px] text-white [@media(max-width:460px)]:text-[14px] [@media(max-width:360px)]:text-[10px]">
						Can't Get the codeQr now ! try it later
					</span>
				</div>
			)}
			{QrImage && (
				<Image
					className="size-[50%]"
					width={0}
					height={0}
					fill={false}
					src={QrImage}
					alt=""
				/>
			)}
			<h2 className=" font-semibold text-[20px] text-gray-300 text-opacity-60 [@media(max-width:560px]:text-[15px] [@media(max-width:560px]:font-medium [@media(max-width:460px]:text-[12px]">
				3. Click the button to finish setup
			</h2>
			<button
				className="w-[138px] h-[37px] bg-green-500 bg-opacity-70 rounded-[10px]   font-bold text-[16px] text-white cursor-pointer mb-[50px]"
				onClick={() => setPopUp(false)}
			>
				ok
			</button>
		</div>
	);
}

export function PopupEnternumber(props) {
	const setPopUp = props.update;
	const username = props.username;
	const [error, setError] = useState();
	const [errorSubmit, setErrorSubmit] = useState();
	const [code, setCode] = useState();
	const [ready, setReady] = useState();

	const navigate = useRouter();

	return (
		<>
			<div className="absolute z-[3] top-0 size-full flex justify-center items-center backdrop-blur-[5px]">
				<div className="w-[90%] flex flex-col items-center gap-[20px] bg-[#343434] rounded-[25px] shadow-[0_4px_40px_5px_rgba(0,0,0,0.7)] relative">
					{closePopopupSvg(setPopUp)}
					<h1 className=" font-bold text-[30px] text-white mt-[50px] [@media(max-width:560px)]:text-[20px] [@media(max-width:460px)]:text-[16px]">
						Tow-Factor Authentication
					</h1>
					<h2 className=" font-semibold text-[20px] text-gray-300 text-opacity-60 [@media(max-width:560px)]:text-[15px] [@media(max-width:560px)]:font-medium [@media(max-width:460px)]:text-[12px]">
						Enter the Code generated by your Authenticator App
					</h2>
					<div
						className={
							errorSubmit
								? "animate-shake bg-red-600 w-[60%] h-[40px] rounded-[5px] flex justify-center [@media(max-width:560px)]:w-[80%]"
								: "hidden"
						}
					>
						{errorSvg}
						<span className=" p-[5px] text-white [@media(max-width:460px)]:text-[14px] [@media(max-width:360px)]:text-[10px]">
							The code is inccorect!
						</span>
					</div>
					<div className="w-full m-[30px] flex justify-center items-center">
						<input
							onChange={(e) =>
								setNumber(e, setError, setCode, setReady)
							}
							className={`rounded-[10px] w-[40%] h-[50px] outline-none  font-bold text-[30px] text-black text-center [@media(max-width:560px)]:w-[80%] ${error ? "animate-shake border-[1px]  border-red-600" : ""}`}
							type="text"
							maxLength="6"
							autoFocus={true}
						/>
					</div>
					<button
						className={`w-[138px] h-[37px] bg-green-500 bg-opacity-70 rounded-[10px]   font-bold text-[16px] cursor-pointer mb-[50px] ${ready ? "text-white" : "text-gray-300 text-opacity-60"}`}
						onClick={() => {
							submitNumber(
								username,
								code,
								setErrorSubmit,
								navigate,
							);
						}}
					>
						verify
					</button>
				</div>
			</div>
		</>
	);
}
